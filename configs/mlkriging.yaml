features:
  - name: my pickle files
    type: pickle
    files:
      covariates: features.pk
      targets: targets.pk
      featurevec: featurevec.pk
      rawcovariates: rawcovariates.csv
      rawcovariates_mask: rawcovariates_mask.csv
  - name: my features 1
    type: ordinal
    files:
      # this list should ideally not contain lat/lon covariates
      - list: /home/masoud/GA_data/GA-cover2/sirsam_covariates_ordinal.txt
    # transforms are performed in order
    transforms:
      - centre
      - standardise
    imputation: nn

  - name: my features 2
    type: categorical
    files:
      - list: /home/masoud/GA_data/GA-cover2/sirsam_covariates_cat.txt
    transforms: randomhot
    imputation: nn

# only used during prediction
mask:
  file: /home/masoud/GA_data/mask/old_mask_test.tif
  retain: 1

# only used during prediction of mlkrige
lon_lat:  # used for regression kriging, i.e., mlkrige aglo
  lon: /home/masoud/GA_data/GA-cover2/LONGITUDE_GRID1.tif
  lat: /home/masoud/GA_data/GA-cover2/LATITUDE_GRID1.tif

preprocessing:
  # imputation: none
  # imputation: gaus
  # imputation: nn
  imputation:
  transforms:
#    - center
#    - standardise
    # - whiten:
        # keep_fraction: 0.8

# resample: choice (value, spatial)
# bootstrap: bool, sampling with or without replacement
# output_samples: number of output samples kept
# bins: for value based resampling only. Number of bins to sample from.
# rows and cols: for spatial resampling, sample from rows X cols tiles
# resampling is performed in sequence. The order of spatial/value is important.
targets:
  file: /home/masoud/GA_data/GA-cover2/geochem_sites.shp
  property: K_ppm_imp_
#  resample:
#    - spatial:
#        arguments:
#          rows: 4
#          cols: 4
#          bootstrap: False
#          output_samples: 1000
#    - value:
#        arguments:
#          bins: 10
#          bootstrap: False
#          output_samples: 1000


#learning:
#  algorithm: transformedrandomforest
#  arguments:
#    n_estimators: 10
#    target_transform: log
#    max_depth: 250
#    max_features: log2
#    min_samples_split: 10


# mlkrige ml_methods must be one of [sgdbayesreg,
# transformedrandomforest, transformedbayesreg, multirandomforest, approxgp
# bayesreg, sgdapproxgp]
learning:
  algorithm: mlkrige
  arguments:
    ml_method: transformedrandomforest
    ml_params: {n_estimators: 10,
                target_transform: log,
                max_depth: 250,
                max_features: log2,
                min_samples_split: 10}
    method: ordinary
    variogram_model: linear
    n_closest_points: 10
    verbose: False


# outbands: number of output bands desired.
# Bands (1:5): ['Prediction', 'Variance', 'Lower quantile',
# 'Upper quantile', 'Entropy']
prediction:
  quantiles: 0.95
  outbands: 1

validation:
#  #- feature_rank
  - parallel
  - k-fold:
      folds: 5
      random_seed: 1

output:
  directory: .

